{"version":3,"sources":["common/dcf-notice.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","root","factory","define","amd","exports","module","require","dcfWidgetNotice","dcfHelperUuidv4","undefined","uuidv4","Notice","notices","document","querySelectorAll","fixedBottomExists","querySelector","slice","call","noticeClasses","notify","success","alert","fatal","noticeLocationClasses","current","nav","fixedBottom","fixedBottomLeft","noticeAnimationClasses","slideInScroll","slideUp","closeButtonClasses","prependMain","el","main","firstChild","firstElementChild","insertBefore","collapseExpandMessage","closeButton","title","message","expanded","getAttribute","innerText","classList","add","id","localStorage","setItem","remove","Boolean","setAttribute","toString","addCloseButton","isCollapsible","createElement","forEach","closeButtonclass","noticeTitle","noticeMessage","noticeMessageId","console","error","addEventListener","notice","hideNotice","e","propertyName","removeEventListener","focus","isDrawn","mobileObserver","desktopObserver","mq","window","matchMedia","mobileConfig","rootMargin","threshold","desktopConfig","observerCallback","entries","observer","entry","isIntersecting","intersectionRatio","thresholds","noticeAnimationClass","target","disconnect","onWidthChange","matches","IntersectionObserver","observe","createNotice","initialized","noticeType","dataset","noticeLocation","location","noticeAnimation","animation","noticeCollapsible","collapsible","noticeClass","info","getItem","noticeLocationClass","addListener","toggleButton","initialize","create","arguments","length","widgetOptions","insertionReference","insertionPoint","noticeHeader","noticeContent","keys","Object","key","appendChild","insertAdjacentElement"],"mappings":"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","file":"dcf-notice.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n;(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['./dcf-uuidGen'], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory(require('./dcf-uuidGen'));\n  } else {\n    root.dcfWidgetNotice = factory(root.dcfHelperUuidv4);\n  }\n})(undefined, function (uuidv4) {\n  // uuid-gen dependency defined in gruntfile UMD task and passed in as uuidv4\n  // TODO change this to use Class instead\n\n  var Notice = {};\n  var notices = document.querySelectorAll('[data-widget=\"notice\"]');\n  var fixedBottomExists = document.querySelector('[id*=\"unl-widget-fixedBottom-\"]') ? true : false; // flag for checking if a fixedBottom notice has been previously added to the page set flag to true\n\n  notices = [].slice.call(notices);\n\n  // standard classes based on what kind of notice, keep it to DCF classes for now\n  var noticeClasses = {\n    notify: ['dcf-notice', 'unl-notice-notify'],\n    success: ['dcf-notice', 'unl-notice-success'],\n    alert: ['dcf-notice', 'unl-notice--alert'],\n    fatal: ['dcf-notice', 'unl-notice--fatal']\n  };\n\n  var noticeLocationClasses = {\n    current: ['uno'],\n    nav: ['foo'],\n    fixedBottom: ['bar', 'dcf-fixed', 'dcf-notice-fixedBottom', 'dcf-pin-bottom', 'dcf-pin-right', 'dcf-pin-left'],\n    fixedBottomLeft: ['zoink'] // TODO add option that goes 50% width on desktop when fixedBottom\n  };\n\n  // default animations depending on associated locations\n  // fixedBottom associated with slideUp animation. Everything else uses slideInScroll\n  var noticeAnimationClasses = {\n    slideInScroll: ['baz'],\n    slideUp: ['car']\n  };\n\n  var closeButtonClasses = ['dcf-absolute', 'dcf-pin-top', 'dcf-pin-right', 'dcf-mt-3', 'dcf-mr-3', 'dcf-btn', 'dcf-btn-tertiary', 'js-notice-toggle'];\n\n  /**\n   * Functions\n   */\n\n  /**\n   * @purpose - move element to be the first child of main\n   * @param el - the element to be moved\n   */\n  function prependMain(el) {\n    var main = document.querySelector('main');\n    var firstChild = main.firstElementChild;\n    main.insertBefore(el, firstChild);\n  }\n\n  /**\n   * @purpose - permanently closes the notice element\n   * @param notice - notice to be closed\n   *\n   */\n  function closeNotice(notice) {\n\n    function hideNotice(e) {\n      if (e.propertyName !== \"max-height\") return;\n      notice.classList.add('dcf-d-none');\n      notice.removeEventListener('transitionend', hideNotice);\n      document.querySelector('main').focus(); // sending focus back to main\n    }\n\n    notice.addEventListener('transitionend', hideNotice);\n    notice.classList.add('dcf-notice-fixedBottom--close');\n\n    localStorage.setItem(notice.id, 'closed');\n  }\n\n  /**\n   * @purpose - collapse message when collapse button is selected\n   * @param el - notice to be closed\n   * @param closeButton - the close button associated with this notice\n   * @param title - title of notice\n   * @param message - message of notice\n   */\n  function collapseExpandMessage(el, closeButton, title, message) {\n    // Find out if notice is expanded\n    var expanded = closeButton.getAttribute('aria-expanded') === \"true\" ? true : false;\n\n    if (expanded) {\n      // if expanded, collapse message\n      closeButton.innerText = \"Expand\";\n      title.classList.add('dcf-notice-title-collapse');\n      message.classList.add('dcf-notice-message-collapse');\n      if (el.id) localStorage.setItem(el.id, 'collapsed');\n    } else {\n      // if collapse, expand message\n      closeButton.innerText = \"Collapse\";\n      message.classList.remove('dcf-notice-message-collapse');\n      title.classList.remove('dcf-notice-title-collapse');\n      if (el.id) localStorage.setItem(el.id, 'expanded');\n    }\n\n    // Invert to get new state\n    expanded = new Boolean(!expanded);\n\n    //Apply new state to notice\n    closeButton.setAttribute('aria-expanded', expanded.toString());\n  }\n\n  /**\n   * @purpose add a close button to the widget and the associated click events\n   * @param el\n   * @param isCollapsible\n   */\n  function addCloseButton(el, isCollapsible) {\n    var closeButton = document.createElement('button');\n    closeButtonClasses.forEach(function (closeButtonclass) {\n      return closeButton.classList.add(closeButtonclass);\n    });\n\n    if (isCollapsible) {\n      // if notice can be collapsed\n      var noticeTitle = el.querySelector('.js-notice-title');\n      var noticeMessage = el.querySelector('.js-notice-message');\n      var noticeMessageId = noticeMessage.id || uuidv4();\n\n      closeButton.innerText = 'collapse';\n      closeButton.setAttribute('aria-expanded', 'true');\n\n      if (!noticeTitle) {\n        console.error('Your notice is missing a title.');\n        return;\n      }\n\n      if (!noticeMessage) {\n        console.error('Your notice is missing a message.');\n        return;\n      }\n\n      noticeTitle.classList.add('dcf-notice-title');\n\n      !noticeMessage.id && (noticeMessage.id = noticeMessageId); //if no id is provided use the generated id\n      closeButton.setAttribute('aria-controls', noticeMessageId);\n      noticeMessage.classList.add('dcf-notice-message');\n\n      closeButton.addEventListener('click', function () {\n        collapseExpandMessage(el, closeButton, noticeTitle, noticeMessage);\n      });\n    } else {\n      // else close the notice out completely\n      closeButton.innerText = 'close';\n      closeButton.addEventListener('click', function () {\n        closeNotice(el);\n      });\n    }\n\n    el.insertBefore(closeButton, el.firstElementChild);\n  }\n\n  /**\n   * Intersection Observer related code\n   */\n\n  // intersection observer - one time drawing variables and functions\n  var isDrawn = false;\n  var isMobile = false;\n  var mobileObserver = void 0,\n      desktopObserver = void 0;\n  var mq = window.matchMedia(\"(min-width: 480px)\");\n  var mobileConfig = {\n    /* on mobile given potential line breaks, we won't be able to view the entire notice in its\n    entirety at one go so might want to show the notice when close to half of it is shown */\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.65\n  };\n  var desktopConfig = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.8\n  };\n\n  function observerCallback(entries, observer) {\n    entries.forEach(function (entry) {\n      if (entry.isIntersecting) {\n        if (entry.intersectionRatio > 0 && entry.intersectionRatio >= observer.thresholds[0]) {\n          noticeAnimationClasses.slideInScroll.forEach(function (noticeAnimationClass) {\n            return entry.target.classList.add(noticeAnimationClass);\n          });\n\n          // set isDrawn flag to true after actions have been taken\n          isDrawn = true;\n          observer.disconnect();\n        }\n      }\n    });\n  }\n\n  function onWidthChange(mq) {\n    if (isDrawn) return;\n    if (mq.matches) {\n      //desktop\n      isMobile = false;\n      createDesktopObserver();\n\n      if (mobileObserver) {\n        mobileObserver.disconnect();\n      }\n    } else {\n      //mobile\n      isMobile = true;\n      createMobileObserver();\n\n      if (desktopObserver) {\n        desktopObserver.disconnect();\n      }\n    }\n  }\n\n  function createMobileObserver() {\n    notices.forEach(function (notice) {\n      mobileObserver = new IntersectionObserver(observerCallback, mobileConfig);\n      mobileObserver.observe(notice);\n    });\n  }\n\n  function createDesktopObserver() {\n    notices.forEach(function (notice) {\n      desktopObserver = new IntersectionObserver(observerCallback, desktopConfig);\n      desktopObserver.observe(notice);\n    });\n  }\n\n  /**\n   * @purpose reusable notice creation and styling code\n   * @param notice - the notice element\n   */\n  function createNotice(notice) {\n    if (notice.initialized) return; // exit if the notice has been initialized\n\n    var noticeType = notice.dataset.noticeType;\n    var noticeLocation = notice.dataset.location;\n    var noticeAnimation = notice.dataset.animation === \"true\" ? true : false;\n    var noticeCollapsible = notice.dataset.collapsible === \"true\" ? true : false;\n\n    // 1.check notice option type and add the needed classes\n    if (noticeClasses[noticeType]) {\n      noticeClasses[noticeType].forEach(function (noticeClass) {\n        return notice.classList.add(noticeClass);\n      });\n    } else {\n      // default to info notify styling\n      noticeClasses.notify.forEach(function (noticeClass) {\n        return notice.classList.add(noticeClass);\n      });\n    }\n\n    // 2.check widget location whether its current, nav, or fixed-bottom and assign class names\n    if (noticeLocation === 'fixedBottom') {\n      if (!fixedBottomExists) {\n        // get provided id and append it with a prefix\n        if (notice.id) {\n          notice.id = 'dcf-widget-fixedBottom--' + notice.id;\n        } else {\n          console.info('An id attribute needs to be provided for the fixed to bottom notice to function properly with' + ' localStorage');\n        }\n\n        // check to see if data-collapsible is false and exists in storage as closed, hide notice rightaway\n        if (!noticeCollapsible && localStorage.getItem(notice.id) === 'closed') {\n          notice.classList.add('dcf-d-none');\n          return;\n        }\n\n        // add assigned classes\n        if (noticeLocationClasses[noticeLocation]) {\n          noticeLocationClasses[noticeLocation].forEach(function (noticeLocationClass) {\n            return notice.classList.add(noticeLocationClass);\n          });\n        }\n\n        addCloseButton(notice, noticeCollapsible);\n        prependMain(notice); // move fixed-bottom notice to the top of source\n        fixedBottomExists = true;\n      } else {\n        console.error('Only one fixed to bottom notice may exist on a page');\n      }\n    } else {\n      // location other than fixedBottom\n\n      if (noticeLocationClasses[noticeLocation]) {\n        noticeLocationClasses[noticeLocation].forEach(function (noticeLocationClass) {\n          return notice.classList.add(noticeLocationClass);\n        });\n      } else {\n        // set current option as the default notice styling\n        noticeLocationClasses.current.forEach(function (noticeLocationClass) {\n          return notice.classList.add(noticeLocationClass);\n        });\n      }\n\n      // 2.1 if its nav, move the element to after the nav and before the page title\n      if (noticeLocation === 'nav') {\n        prependMain(notice);\n      }\n    }\n\n    // 3. check animation type whether its slide-in-scroll?\n    // if exist will have to implement intersection observer\n    // Question for Michael if multiple widgets need intersection observer, how can we make it more modular?\n    if (noticeAnimation) {\n      if (noticeLocation === 'fixedBottom') {\n        // add noticeAnimationClasses.slideUp\n        noticeAnimationClasses.slideUp.forEach(function (noticeAnimationClass) {\n          return notice.classList.add(noticeAnimationClass);\n        });\n      } else {\n        // implement intersection observer\n        // add noticeAnimationClasses.slideInScroll\n        if ('IntersectionObserver' in window) {\n          notice.classList.add('hide-animate');\n          mq.addListener(function () {\n            return onWidthChange(mq);\n          });\n\n          //check browser width once on page load\n          onWidthChange(mq);\n        }\n      }\n    }\n\n    notice.initialized = true;\n\n    // 4. check localStorage for fixed bottom and collapsible\n    if (noticeCollapsible && localStorage.getItem(notice.id) === 'collapsed') {\n      var noticeTitle = notice.querySelector('.js-notice-title');\n      var noticeMessage = notice.querySelector('.js-notice-message');\n      var toggleButton = notice.querySelector('.js-notice-toggle');\n\n      if (!noticeTitle) {\n        console.error('Your notice is missing a title.');\n        return;\n      }\n\n      if (!noticeMessage) {\n        console.error('Your notice is missing a message.');\n        return;\n      }\n\n      collapseExpandMessage(notice, toggleButton, noticeTitle, noticeMessage);\n    }\n  }\n\n  /**\n   *  widget.initialize is the default functionality that scans all the existing notice widgets in the dom\n   *  and initialize them\n   */\n  Notice.initialize = function () {\n    notices.forEach(function (notice) {\n      createNotice(notice);\n    });\n  };\n\n  /**\n   * widget.create takes in arguments to dynamically create notices on the fly\n   */\n  Notice.create = function () {\n    var noticeTitle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var noticeMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var widgetOptions = arguments[2];\n    var insertionReference = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'main';\n    var insertionPoint = arguments[4];\n\n\n    if (noticeTitle.length === 0) {\n      console.error('Please provide a notice title');\n      return;\n    }\n\n    if (noticeMessage.length === 0) {\n      console.error('Please provide a notice message');\n      return;\n    }\n\n    var notice = document.createElement('div');\n    var noticeHeader = document.createElement('h2');\n    var noticeContent = document.createElement('p');\n\n    // set up the notice element\n    var keys = Object.keys(widgetOptions);\n    notice.setAttribute('role', 'alert');\n\n    keys.forEach(function (key) {\n      if (key === 'id') {\n        notice.id = widgetOptions[key];\n      } else {\n        notice.setAttribute('data-' + key, widgetOptions[key]);\n      }\n    });\n\n    if (typeof noticeTitle === 'string') noticeHeader.innerText = noticeTitle;\n    if (typeof noticeMessage === 'string') noticeContent.innerText = noticeMessage;\n\n    noticeHeader.classList.add('js-notice-title');\n    noticeContent.classList.add('js-notice-message');\n\n    notice.appendChild(noticeHeader);\n    notice.appendChild(noticeContent);\n\n    // insert the notice\n    if (insertionReference === 'main' && insertionPoint === undefined) {\n      // assuming no insertionReference or insertionPoint provided\n      prependMain(notice);\n    } else {\n      // if insertionReference provided without insertigonPoint provided, default will be afterbegin\n      if (insertionPoint === undefined) insertionPoint = 'afterbegin';\n      var targetElement = document.querySelector(insertionReference);\n      targetElement.insertAdjacentElement(insertionPoint, notice);\n    }\n\n    // call createNotice\n    createNotice(notice);\n  };\n\n  return Notice;\n});"]}