{"version":3,"sources":["common/dcf-lazyLoad.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_typeof","Symbol","iterator","obj","constructor","_classCallCheck","instance","TypeError","root","factory","define","amd","exports","module","dcfLazyLoad","undefined","LazyLoad","_this","this","onIntersection","entries","observer","imageCount","disconnect","entry","intersectionRatio","preloadImage","applyImage","unobserve","imagesList","document","querySelectorAll","observerConfig","rootMargin","threshold","value","w","window","d","e","documentElement","g","getElementsByTagName","innerWidth","clientWidth","image","src","dataset","srcset","sizes","classList","add","remove","removeAttribute","pxTOvw","parentElement","arguments","Promise","resolve","reject","Image","onload","onerror","fetchImage","catch","err","mes","images","preload","HTMLImageElement","loadImagesImmediately","IntersectionObserver","contains","observe"],"mappings":"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","file":"dcf-lazyLoad.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n;(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else {\n    root.dcfLazyLoad = factory();\n  }\n})(undefined, function () {\n  var LazyLoad = function () {\n    /**\n     * class constructor\n     */\n    function LazyLoad() {\n      var _this = this;\n\n      _classCallCheck(this, LazyLoad);\n\n      this.onIntersection = function (entries, observer) {\n\n        // Disconnect if we've already loaded all of the images\n        if (_this.imageCount === 0) {\n          _this.observer.disconnect();\n        }\n\n        // Loop through the entries\n        for (var i = 0; i < entries.length; i++) {\n          var entry = entries[i];\n\n          // Are we in viewport?\n          // console.log(entry.intersectionRatio);\n\n          if (entry.intersectionRatio > 0) {\n            _this.imageCount--;\n            _this.preloadImage(entry.target);\n            _this.applyImage(entry.target);\n            _this.observer.unobserve(entry.target);\n          }\n        }\n      };\n\n      // Elements to be lazy loaded\n      this.imagesList = document.querySelectorAll('[loading=lazy], .dcf-lazy-load');\n\n      // Configure Intersection Observer\n      this.observerConfig = {\n        rootMargin: '0px 0px 50px 0px', // 50px from bottom of browser viewport\n        threshold: [0]\n      };\n    }\n\n    /**\n     * Convert pixels to viewport-width units\n     * @param {integer} value: pixel value of element\n     */\n\n\n    _createClass(LazyLoad, [{\n      key: 'pxTOvw',\n      value: function pxTOvw(value) {\n        var w = window,\n            d = document,\n            e = d.documentElement,\n            g = d.getElementsByTagName('body')[0],\n            x = w.innerWidth || e.clientWidth || g.clientWidth;\n\n        var result = 100 * value / x;\n        return result + 'vw';\n      }\n    }, {\n      key: 'applyImage',\n\n\n      /**\n       * Apply the image: preloaded image is loaded but not applied to actual image element\n       * @param {string} image: the image element that we are targetting\n       */\n      value: function applyImage(image) {\n        var src = image.dataset.src;\n        var srcset = image.dataset.srcset || null;\n        var sizes = image.sizes || 'auto';\n\n        if (!src) {\n          return;\n          //throw new Error('No image src attribute provided');\n        }\n\n        // Prevent this from being lazy loaded a second time.\n        image.classList.add('dcf-lazy-loaded');\n        image.classList.remove('dcf-lazy-load');\n        src && (image.src = src);\n        src && image.removeAttribute('data-src');\n        srcset && (image.srcset = srcset);\n        srcset && image.removeAttribute('data-srcset');\n        if (sizes == 'auto') {\n          image.sizes = this.pxTOvw(image.parentElement.clientWidth);\n        }\n      }\n    }, {\n      key: 'fetchImage',\n\n\n      /**\n       * Fetches the image for the given source\n       * @param {string} src\n       * @param {string} srcset, defaults to null if not provided\n       */\n      value: function fetchImage(src) {\n        var srcset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var sizes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        return new Promise(function (resolve, reject) {\n          var image = new Image();\n          src && (image.src = src);\n          srcset && (image.srcset = srcset);\n          sizes && (image.sizes = sizes);\n\n          image.onload = resolve;\n          image.onerror = reject;\n        });\n      }\n\n      /**\n       * Preloads the image\n       * @param {object} image\n       */\n\n    }, {\n      key: 'preloadImage',\n      value: function preloadImage(image) {\n        var src = image.dataset.src;\n        var srcset = image.dataset.srcset;\n        var sizes = image.dataset.sizes || null;\n\n        if (!src) {\n          return;\n          //throw new Error('No image src attribute provided');\n        }\n\n        return this.fetchImage(src, srcset, sizes).catch(function (err) {\n          return 'Image failed to fetch ' + err.mes;\n        });\n      }\n    }, {\n      key: 'loadImagesImmediately',\n\n\n      /**\n       * Load all of the images immediately\n       * @param {NodeListOf<Element>} preload\n       * @param {boolean} images\n       */\n      value: function loadImagesImmediately(images) {\n        var preload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        // foreach() is not supported in IE\n        for (var i = 0; i < images.length; i++) {\n          var image = images[i];\n          if (preload === true) {\n            this.preloadImage(image);\n          }\n          this.applyImage(image);\n        }\n      }\n\n      /**\n       * Disconnect the observer\n       */\n\n    }, {\n      key: 'disconnect',\n      value: function disconnect() {\n        if (!this.observer) {\n          return;\n        }\n\n        this.observer.disconnect();\n      }\n\n      /**\n       * On intersection\n       * @param {array} intersection entries\n       * @param {object} intersection observer\n       */\n\n    }, {\n      key: 'initialize',\n      value: function initialize() {\n        if (!this.imagesList) return;\n\n        // Counter: keeps track of which images haven't been loaded\n        this.imageCount = this.imagesList.length;\n\n        if ('loading' in HTMLImageElement.prototype) {\n          // Native lazy loading IS supported, so set src-data to src\n          this.loadImagesImmediately(this.imagesList, false);\n        } else {\n          // Native lazy loading is NOT supported, so handle via JavaScript\n          // If browser doesn't support intersection observer, load the images immediately\n          if (!('IntersectionObserver' in window)) {\n            this.loadImagesImmediately(this.imagesList);\n          } else {\n            // It is supported, load the images\n            this.observer = new IntersectionObserver(this.onIntersection, this.observerConfig);\n\n            // foreach() is not supported in IE\n            for (var i = 0; i < this.imageCount; i++) {\n              var image = this.imagesList[i];\n              if (image.classList.contains('dcf-lazy-loaded')) {\n                continue;\n              }\n\n              this.observer.observe(image);\n            }\n          }\n        }\n      }\n    }]);\n\n    return LazyLoad;\n  }();\n\n  return LazyLoad;\n});"]}