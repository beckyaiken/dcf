{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/dist/js/app/preBabel/common/dcf-lazyLoad.js","assets/dist/js/app/preBabel/common/dcf-modal.js","example/js/src/main-body.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.dcfLazyLoad = factory();\n  }\n}(this, function() {\nclass LazyLoad {\n  /**\n   * class constructor\n   * @param {imagesList} nodelist of selected images\n   * @param {observerConfig} object of intersectionObserver configuration\n   * @param {classNames} array of classes applied\n   */\n  constructor(imagesList, observerConfig, classNames) {\n    this.imagesList = imagesList;\n    this.observerConfig = observerConfig;\n    this.classNames = classNames; // add onEnter, onEnterActive?\n  }\n\n  pxTOvw(value) {\n    var w = window,\n      d = document,\n      e = d.documentElement,\n      g = d.getElementsByTagName('body')[0],\n      x = w.innerWidth || e.clientWidth || g.clientWidth;\n\n    var result = (100*value)/x;\n    return result + 'vw';\n  };\n\n  /**\n   * Apply the image: preloaded image is loaded but not applied to actual image element\n   * @param {string} image: the image element that we are targetting\n   */\n  applyImage(image) {\n    const src = image.dataset.src;\n    const srcset = image.dataset.srcset || null;\n    const sizes = image.dataset.sizes || this.pxTOvw(image.parentElement.clientWidth);\n\n    if (!src) {\n      return;\n      //throw new Error('No image src attribute provided');\n    }\n\n    // Prevent this from being lazy loaded a second time.\n    image.classList.add('dcf-lazy-loaded');\n    src && (image.src = src);\n    src && (image.removeAttribute('data-src'));\n    srcset && (image.srcset = srcset);\n    srcset && (image.removeAttribute('data-srcset'));\n    sizes && (image.sizes = sizes);\n    sizes && (image.removeAttribute('data-sizes'));\n    this.classNames.length && this.classNames.forEach(className => image.classList.add(className));\n  };\n\n  /**\n   * Fetches the image for the given source\n   * @param {string} src\n   * @param {string} srcset, defaults to null if not provided\n   */\n  fetchImage(src, srcset = null, sizes = null) {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      src && (image.src = src);\n      srcset && (image.srcset = srcset);\n      sizes && (image.sizes = sizes);\n\n      image.onload = resolve;\n      image.onerror = reject;\n    });\n  }\n\n  /**\n   * Preloads the image\n   * @param {object} image\n   */\n  preloadImage(image) {\n    const src = image.dataset.src;\n    const srcset = image.dataset.srcset;\n    const sizes = image.dataset.sizes || null;\n\n    if (!src) {\n      return;\n      //throw new Error('No image src attribute provided');\n    }\n\n    return this.fetchImage(src, srcset, sizes).catch(err => `Image failed to fetch ${err.mes}`);\n  };\n\n  /**\n   * Load all of the images immediately\n   * @param {NodeListOf<Element>} preload\n   * @param {boolean} images\n   */\n  loadImagesImmediately(images, preload = true) {\n    // foreach() is not supported in IE\n    for (let i = 0; i < images.length; i++) {\n      let image = images[i];\n      if (preload === true) {\n        this.preloadImage(image);\n      }\n      this.applyImage(image);\n    }\n  }\n\n  /**\n   * Disconnect the observer\n   */\n  disconnect() {\n    if (!this.observer) {\n      return;\n    }\n\n    this.observer.disconnect();\n  };\n\n  /**\n   * On intersection\n   * @param {array} intersection entries\n   * @param {object} intersection observer\n   */\n  onIntersection = (entries, observer) => {\n\n    // Disconnect if we've already loaded all of the images\n    if (this.imageCount === 0) {\n      this.observer.disconnect();\n    }\n\n    // Loop through the entries\n    for (let i = 0; i < entries.length; i++) {\n      let entry = entries[i];\n\n      // Are we in viewport?\n      // console.log(entry.intersectionRatio);\n\n      if (entry.intersectionRatio > observer.thresholds[0] && entry.intersectionRatio < observer.thresholds[1]) {\n        this.preloadImage(entry.target);\n      } else if (entry.intersectionRatio > observer.thresholds[1]) {\n        this.imageCount--;\n        this.applyImage(entry.target);\n        this.observer.unobserve(entry.target);\n      }\n    }\n  };\n\n\n  initialize() {\n    if(!this.imagesList) return;\n\n    // counter: keeps track of which images that hasn't been loaded\n    this.imageCount = this.imagesList.length;\n\n    if (\"loading\" in HTMLImageElement.prototype) {\n      // Native lazy loading IS supported, so set src-data to src\n      this.loadImagesImmediately(this.imagesList, false);\n    } else {\n      // Native lazy loading NOT supported, so handle via javascript\n      // If browser doesn't support intersection observer, load the images immediately\n      if (!('IntersectionObserver' in window)) {\n        this.loadImagesImmediately(this.imagesList);\n      } else {\n        // It is supported, load the images\n        this.observer = new IntersectionObserver(this.onIntersection, this.observerConfig);\n\n        // foreach() is not supported in IE\n        for (let i = 0; i < this.imageCount; i++) {\n          let image = this.imagesList[i];\n          if (image.classList.contains('dcf-lazy-loaded')) {\n            continue;\n          }\n\n          this.observer.observe(image);\n        }\n      }\n    }\n  }\n}\n\nreturn LazyLoad;\n}));\n",";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.dcfModal = factory();\n  }\n}(this, function() {\nclass Modal {\n\n  /**\n   * class constructor\n   * @param {modals} modals of selected modals\n   */\n  constructor(modals) {\n//     this.thebody = body;\n    this.modals = modals;\n  }\n\n\n\n  /**\n   * Prepend modals to body so that elements outside of modal can be made inert\n   * @param {string} el: the element that we are targetting\n   */\n  prependBody(el) {\n    const body = document.querySelector('body');\n    const firstChild = body.firstElementChild;\n    body.insertBefore(el, firstChild);\n  }\n\n  // Transition modal on close\n//   modalTransition(event, modal) {\n//     const thisModal = this;\n//\n//     // Remove the event listener after the modal transition has completed\n//     thisModal.removeEventListener('transitionend', modalTransition);\n//\n//     // Add the `.dcf-invisible` class to this modal after the transition\n//     if (!thisModal.classList.contains('dcf-invisible')) {\n//       thisModal.classList.add('dcf-invisible');\n//     }\n//   }\n\n  // Open modal\n  openModal(modalId, openBtnId) {\n\n    const body = document.querySelector('body');\n\n    for (let i = 0; i < this.modals.length; i++) {\n      const modal = this.modals[i];\n\n      if (modal.getAttribute('id') !== modalId) {\n        this.closeModal(modal.getAttribute('id'));\n      }\n\n    }\n\n    const thisModal = document.getElementById(modalId);\n    let modalOpen = thisModal.getAttribute('aria-hidden') === 'false' ? true : false;\n\n    if (openBtnId) {\n      currentBtn = openBtnId;\n    }\n\n    currentModal = modalId;\n\n    // Don't open modal if it's already open\n    if (modalOpen) {\n      return;\n    }\n\n    // Set elements outside of modal to be inert and hidden from screen readers\n    nonModals.forEach(function(el, array) {\n      el.setAttribute('aria-hidden','true');\n      el.setAttribute('inert','');\n      // TODO: Configure inert polyfill\n    });\n\n//   \tPrevent body from scrolling\n//   \tdisableBodyScroll(thisModal);\n\n    // Add `.dcf-modal-is-open` helper class to body\n    body.classList.add('dcf-modal-is-open');\n\n    // Set attribute for this modal\n    thisModal.setAttribute('aria-hidden', 'false');\n\n    // Add/remove classes to this modal\n    thisModal.classList.remove('dcf-opacity-0', 'dcf-pointer-events-none', 'dcf-invisible');\n    thisModal.classList.add('dcf-opacity-100', 'dcf-pointer-events-auto');\n\n    // Send focus to modal content\n    thisModal.focus();\n\n    // TODO: Trap focus inside the modal content\n\n  }\n\n\n  // Close modal\n  closeModal(modalId) {\n\n    const body = document.querySelector('body');\n    const thisModal = document.getElementById(modalId);\n\n    let modalClosed = thisModal.getAttribute('aria-hidden') === 'true' ? true : false;\n\n    currentModal = null;\n\n    // Don't close modal if it's already closed\n    if (modalClosed) {\n      return;\n    }\n\n    // Remove `.dcf-modal-is-open` helper class from body\n  \tbody.classList.remove('dcf-modal-is-open');\n\n    // Restore visibility andd functionality to elements outside of modal\n    nonModals.forEach(function(el, array) {\n      el.setAttribute('aria-hidden','false');\n      el.removeAttribute('inert');\n    });\n\n    // Set attribute for this modal\n    thisModal.setAttribute('aria-hidden', 'true');\n\n    // Add/remove classes to this modal\n    thisModal.classList.remove('dcf-opacity-100', 'dcf-pointer-events-auto');\n    thisModal.classList.add('dcf-opacity-0', 'dcf-pointer-events-none');\n\n    // Add event listener for the end of the modal transition\n//     thisModal.addEventListener('transitionend', modalTransition);\n\n    // Send focus back to button that opened modal\n    if (currentBtn) {\n      document.getElementById(currentBtn).focus();\n    }\n\n      // TODO: Allow body to scroll\n  }\n\n\n  btnOpenListen(btnOpenModal, modalId, btnId) {\n\n    // TODO: account for multiple buttons able to open a single modal (e.g., search)\n    // Listen for when 'open modal' button is pressed\n    btnOpenModal.addEventListener('click', function () {\n      // Open modal when button is pressed\n      this.openModal(modalId, btnId);\n    }, false);\n\n  }\n\n  btnCloseListen(btnCloseModal, modal) {\n\n    // Listen for when 'close modal' button is pressed\n    btnCloseModal.addEventListener('click', function () {\n      // Open modal when button is pressed\n      this.closeModal(modal.getAttribute('id'));\n    }, false);\n\n  }\n\n  overlayListen(modal, modalContent) {\n\n    // Listen for clicks on the open modal\n    modal.addEventListener('click', function (event) {\n\n      // If the click is in modal content, leave the modal open\n      if (modalContent.contains(event.target)) {\n        return;\n      }\n\n      // If the click is outside the modal content (on the modal overlay), close the modal\n      this.closeModal(modal.getAttribute('id'));\n    });\n\n  }\n\n  // Listen for when 'esc' key is pressed\n//   document.addEventListener('keydown', function (event) {\n//\n//     // Close the currently open modal when 'esc' key is pressed\n//     if (event.which === 27 && currentModal) {\n//       event.preventDefault();\n//       closeModal(currentModal);\n//     }\n//   }, false);\n\n\n  initialize() {\n\n    if(!this.modals) {\n      return;\n    }\n\n    // Define constants used in modal component\n    const body = document.querySelector('body');\n    const btnsOpenModal = document.querySelectorAll('.dcf-btn-open-modal');\n    const btnsCloseModal = document.querySelectorAll('.dcf-btn-close-modal');\n    const modalsContent = document.querySelectorAll('.dcf-modal-content');\n    const skipNav = document.getElementById('dcf-skip-nav');\n    const header = document.getElementById('dcf-header');\n    const main = document.getElementById('dcf-main');\n    const footer = document.getElementById('dcf-footer');\n    const nonModals = [skipNav, header, main, footer];\n\n    let currentBtn = null;\n    let currentModal = null;\n\n    // Loop through all buttons that open modals\n    for (let i = 0; i < btnsOpenModal.length; i++) {\n      const btnOpenModal = btnsOpenModal[i];\n      const modalId = btnOpenModal.getAttribute('data-opens-modal');\n      const btnId = 'dcf-btn-opens-' + modalId;\n      btnOpenModal.setAttribute('id', btnId);\n\n      // Buttons are disabled by default until JavaScript has loaded.\n      // Remove the 'disabled' attribute to make them functional.\n      btnOpenModal.removeAttribute('disabled');\n\n      this.btnOpenListen(btnOpenModal, modalId, btnId);\n    }\n\n\n    // Loop through all modals\n    for (let i = 0; i < this.modals.length; i++) {\n      const modal = this.modals[i];\n      const modalContent = modalsContent[i];\n      const btnCloseModal = btnsCloseModal[i];\n      const modalId = modal.id;\n      const modalHeadingId = modalId + '-heading';\n\n      // Get all headings in each modal\n      const modalHeadings = modalContent.querySelectorAll('h1, h2, h3, h4, h5, h6');\n\n      // Set ID on the first heading of each modal\n      modalHeadings[0].id = modalHeadingId;\n\n      // Prepend modals to body so that elements outside of modal can be made inert when modal is open\n      this.prependBody(modal);\n\n      // Modals are hidden by default until JavaScript has loaded.\n      // Remove `hidden` attribute, then later replace with `.dcf-invisible` to allow for modal transitions.\n      modal.removeAttribute('hidden');\n\n      // Set attributes for each modal\n      modal.setAttribute('aria-labelledby', modalHeadingId);\n      modal.setAttribute('aria-hidden', 'true');\n      modal.setAttribute('role', 'dialog');\n      modal.setAttribute('tabindex', '-1');\n\n      // Add classes to each modal\n      modal.classList.add('dcf-fixed', 'dcf-pin-top', 'dcf-pin-left', 'dcf-h-100%', 'dcf-w-100%', 'dcf-d-flex', 'dcf-ai-center', 'dcf-jc-center', 'dcf-invisible');\n\n      // Set attribute for modal content\n      modalContent.setAttribute('role', 'document');\n\n      // Add classes to modal content\n      // TODO: add these classes only if no custom classes are present in the markup\n      modalContent.classList.add('dcf-relative', 'dcf-wrapper', 'dcf-pt-7', 'dcf-pb-7');\n\n      // Add classes and attributes to each 'close' button\n      // TODO: add these classes only if no custom classes are present in the markup\n      btnCloseModal.classList.add('dcf-absolute', 'dcf-pin-top', 'dcf-pin-right', 'dcf-z-1');\n\n      // Set attributes for each 'close' button\n      btnCloseModal.setAttribute('type', 'button');\n      btnCloseModal.setAttribute('aria-label', 'Close');\n\n      this.overlayListen(modal, modalContent);\n\n      this.btnCloseListen(btnCloseModal, modal);\n\n    }\n\n  }\n\n}\n\nreturn Modal;\n}));\n","let LazyLoad = require('dcf-lazyLoad');\nlet Modal = require('dcf-modal');\n// let Notice = require('dcf-notice');\n\n// let flatpickr = require('flatpickr/flatpickr');\n// require(\"flatpickr/flatpickr.css\");\n\n\n// const noticeOptions = {\n// \twidget: 'notice',\n// \t'notice-type': 'alert',\n// \tanimation: 'true',\n// \tlocation: 'fixedBottom',\n// \tcollapsible: 'true',\n// \tid: 'dynamicNotice1'\n// };\n//\n// Notice.create('Spaghetti Monster Lives', 'You know no spaghetti', noticeOptions);\n\n\n// let datepicker = document.querySelector('[data-widget*=\"flatpickr\"]');\n// flatpickr(datepicker, {\n// \tenableTime: true,\n// \tdateFormat: \"Y-m-d h:iK\",\n// });\n\nconst images = document.querySelectorAll('[loading=lazy], .dcf-lazy-load');\nconst observerConfig = {\n\t// extend intersection root margin by 50px to start intersection earlier by 50px\n\trootMargin: '0px 0px 50px 0px',\n\tthreshold: [0, 0.40]\n};\nconst enterClassNames = ['dcf-fade-in'];\nconst exampleLazyLoad = new LazyLoad(images, observerConfig, enterClassNames);\nexampleLazyLoad.initialize();\n\nconst modals = document.querySelectorAll('.dcf-modal');\nconst exampleModal = new Modal(modals);\nexampleModal.initialize();\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}