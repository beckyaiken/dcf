{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/dist/js/app/preBabel/common/dcf-lazyLoad.js","assets/dist/js/app/preBabel/common/dcf-modal.js","assets/dist/js/app/preBabel/common/dcf-uuidGen.js","example/js/src/main-body.js","node_modules/body-scroll-lock/lib/bodyScrollLock.min.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.dcfLazyLoad = factory();\n  }\n}(this, function() {\nclass LazyLoad {\n  /**\n   * class constructor\n   * @param {imagesList} nodelist of selected images\n   * @param {observerConfig} object of intersectionObserver configuration\n   * @param {classNames} array of classes applied\n   */\n  constructor(imagesList, observerConfig, classNames) {\n    this.imagesList = imagesList;\n    this.observerConfig = observerConfig;\n    this.classNames = classNames; // add onEnter, onEnterActive?\n  }\n\n  pxTOvw(value) {\n    var w = window,\n      d = document,\n      e = d.documentElement,\n      g = d.getElementsByTagName('body')[0],\n      x = w.innerWidth || e.clientWidth || g.clientWidth;\n\n    var result = (100*value)/x;\n    return result + 'vw';\n  };\n\n  /**\n   * Apply the image: preloaded image is loaded but not applied to actual image element\n   * @param {string} image: the image element that we are targetting\n   */\n  applyImage(image) {\n    const src = image.dataset.src;\n    const srcset = image.dataset.srcset || null;\n    const sizes = image.dataset.sizes || this.pxTOvw(image.parentElement.clientWidth);\n\n    if (!src) {\n      return;\n      //throw new Error('No image src attribute provided');\n    }\n\n    // Prevent this from being lazy loaded a second time.\n    image.classList.add('dcf-lazy-loaded');\n    src && (image.src = src);\n    src && (image.removeAttribute('data-src'));\n    srcset && (image.srcset = srcset);\n    srcset && (image.removeAttribute('data-srcset'));\n    sizes && (image.sizes = sizes);\n    sizes && (image.removeAttribute('data-sizes'));\n    this.classNames.length && this.classNames.forEach(className => image.classList.add(className));\n  };\n\n  /**\n   * Fetches the image for the given source\n   * @param {string} src\n   * @param {string} srcset, defaults to null if not provided\n   */\n  fetchImage(src, srcset = null, sizes = null) {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      src && (image.src = src);\n      srcset && (image.srcset = srcset);\n      sizes && (image.sizes = sizes);\n\n      image.onload = resolve;\n      image.onerror = reject;\n    });\n  }\n\n  /**\n   * Preloads the image\n   * @param {object} image\n   */\n  preloadImage(image) {\n    const src = image.dataset.src;\n    const srcset = image.dataset.srcset;\n    const sizes = image.dataset.sizes || null;\n\n    if (!src) {\n      return;\n      //throw new Error('No image src attribute provided');\n    }\n\n    return this.fetchImage(src, srcset, sizes).catch(err => `Image failed to fetch ${err.mes}`);\n  };\n\n  /**\n   * Load all of the images immediately\n   * @param {NodeListOf<Element>} preload\n   * @param {boolean} images\n   */\n  loadImagesImmediately(images, preload = true) {\n    // foreach() is not supported in IE\n    for (let i = 0; i < images.length; i++) {\n      let image = images[i];\n      if (preload === true) {\n        this.preloadImage(image);\n      }\n      this.applyImage(image);\n    }\n  }\n\n  /**\n   * Disconnect the observer\n   */\n  disconnect() {\n    if (!this.observer) {\n      return;\n    }\n\n    this.observer.disconnect();\n  };\n\n  /**\n   * On intersection\n   * @param {array} intersection entries\n   * @param {object} intersection observer\n   */\n  onIntersection = (entries, observer) => {\n\n    // Disconnect if we've already loaded all of the images\n    if (this.imageCount === 0) {\n      this.observer.disconnect();\n    }\n\n    // Loop through the entries\n    for (let i = 0; i < entries.length; i++) {\n      let entry = entries[i];\n\n      // Are we in viewport?\n      // console.log(entry.intersectionRatio);\n\n      if (entry.intersectionRatio > observer.thresholds[0] && entry.intersectionRatio < observer.thresholds[1]) {\n        this.preloadImage(entry.target);\n      } else if (entry.intersectionRatio > observer.thresholds[1]) {\n        this.imageCount--;\n        this.applyImage(entry.target);\n        this.observer.unobserve(entry.target);\n      }\n    }\n  };\n\n\n  initialize() {\n    if(!this.imagesList) return;\n\n    // counter: keeps track of which images that hasn't been loaded\n    this.imageCount = this.imagesList.length;\n\n    if (\"loading\" in HTMLImageElement.prototype) {\n      // Native lazy loading IS supported, so set src-data to src\n      this.loadImagesImmediately(this.imagesList, false);\n    } else {\n      // Native lazy loading NOT supported, so handle via javascript\n      // If browser doesn't support intersection observer, load the images immediately\n      if (!('IntersectionObserver' in window)) {\n        this.loadImagesImmediately(this.imagesList);\n      } else {\n        // It is supported, load the images\n        this.observer = new IntersectionObserver(this.onIntersection, this.observerConfig);\n\n        // foreach() is not supported in IE\n        for (let i = 0; i < this.imageCount; i++) {\n          let image = this.imagesList[i];\n          if (image.classList.contains('dcf-lazy-loaded')) {\n            continue;\n          }\n\n          this.observer.observe(image);\n        }\n      }\n    }\n  }\n}\n\nreturn LazyLoad;\n}));\n",";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['./dcf-uuidGen'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('./dcf-uuidGen'));\n  } else {\n    root.dcfModal = factory(root.dcfHelperUuidv4);\n  }\n}(this, function(uuidv4) {\nclass Modal {\n  /**\n   * class constructor\n   * @param {modals} modals of selected modals\n   */\n  constructor(modals, bodyScrollLock) {\n    this.modals = modals;\n    this.disableBodyScroll = null;\n    this.enableBodyScroll = null;\n    if (bodyScrollLock && bodyScrollLock.disableBodyScroll && bodyScrollLock.enableBodyScroll) {\n      this.disableBodyScroll = bodyScrollLock.disableBodyScroll;\n      this.enableBodyScroll = bodyScrollLock.enableBodyScroll;\n    }\n  }\n\n  /**\n   * Prepend modals to body so that elements outside of modal can be made inert\n   * @param {string} el: the element that we are targetting\n   */\n  appendToBody(el) {\n    const body = document.querySelector('body');\n    body.appendChild(el);\n  }\n\n  // Toggle modal\n  toggleModal(modalId, btnId) {\n    const thisModal = document.getElementById(modalId);\n    let modalOpen = thisModal.getAttribute('aria-hidden') === 'false' ? true : false;\n\n    if (modalOpen) {\n      // modal open so close it\n      this.closeModal(modalId, btnId);\n    } else {\n      // modal closed so open it\n      this.openModal(modalId, btnId);\n    }\n  }\n\n  // Open modal\n  openModal(modalId, openBtnId) {\n    const body = document.querySelector('body');\n    const skipNav = document.getElementById('dcf-skip-nav');\n    const header = document.getElementById('dcf-header');\n    const main = document.getElementById('dcf-main');\n    const footer = document.getElementById('dcf-footer');\n    const navToggleGroup = document.getElementById('dcf-nav-toggle-group');\n    const navToggleGroupParent = navToggleGroup && navToggleGroup.parentElement ? navToggleGroup.parentElement: null;\n    const nonModals = [ skipNav, header, main, footer ];\n\n    for (let i = 0; i < this.modals.length; i++) {\n      const modal = this.modals[i];\n      if (modal.getAttribute('id') !== modalId) {\n        this.closeModal(modal.getAttribute('id'));\n      }\n    }\n\n    const thisModal = document.getElementById(modalId);\n    let modalOpen = thisModal.getAttribute('aria-hidden') === 'false' ? true : false;\n\n    let modalWithNavToggleGroup = false;\n    if (openBtnId) {\n      this.currentBtn = openBtnId;\n      const openBtn = document.getElementById(openBtnId);\n      modalWithNavToggleGroup = openBtn && openBtn.getAttribute('data-with-nav-toggle-group') === 'true';\n    }\n\n    this.currentModal = modalId;\n\n    // Don't open modal if it's already open\n    if (modalOpen) {\n      return;\n    }\n\n    // Set elements outside of modal to be inert and hidden from screen readers\n    nonModals.forEach(function(el, array) {\n      if (modalWithNavToggleGroup && navToggleGroup && el === navToggleGroupParent) {\n        el.setAttribute('aria-hidden','false');\n\n        // hide all children of navToggleGroupParent except navToggleGroup\n        const children = navToggleGroupParent.childNodes;\n        children.forEach(function(child, array) {\n          if (child.nodeType === Node.ELEMENT_NODE) {\n            if (child === navToggleGroup) {\n              child.setAttribute('aria-hidden', 'false');\n            } else {\n              child.setAttribute('aria-hidden', 'true');\n            }\n          }\n        });\n      } else {\n        el.setAttribute('aria-hidden','true');\n      }\n    });\n\n    // Prevent body from scrolling\n    if (this.disableBodyScroll) {\n      this.disableBodyScroll(thisModal);\n    }\n\n    // Add `.dcf-modal-is-open` helper class to body\n    body.classList.add('dcf-modal-is-open');\n\n    // Set attribute for this modal\n    thisModal.setAttribute('aria-hidden', 'false');\n\n    // Add/remove classes to this modal\n    thisModal.classList.remove('dcf-opacity-0', 'dcf-pointer-events-none', 'dcf-invisible');\n    thisModal.classList.add('dcf-opacity-100', 'dcf-pointer-events-auto');\n\n    // Apply modal with toggle group class if requested\n    if (modalWithNavToggleGroup) {\n      thisModal.classList.add('dcf-z-modal-with-nav-toggle-group');\n    }\n    const keycodeTab = 9;\n    const tabFocusEls = thisModal.querySelectorAll('button:not([hidden]):not([disabled]), ' +\n      '[href]:not([hidden]), input:not([hidden]):not([type=\"hidden\"]):not([disabled]), ' +\n      'select:not([hidden]):not([disabled]), textarea:not([hidden]):not([disabled]), ' +\n      '[tabindex=\"0\"]:not([hidden]):not([disabled]), summary:not([hidden]), ' +\n      '[contenteditable]:not([hidden]), audio[controls]:not([hidden]), ' +\n      'video[controls]:not([hidden])');\n    let firstTabFocusEl = tabFocusEls[0];\n    let lastTabFocusEl = tabFocusEls[tabFocusEls.length - 1];\n\n    // Send focus to the modal\n    thisModal.focus();\n\n    // Trap focus inside the modal content\n    thisModal.addEventListener('keydown', function(e) {\n\n      let isTabPressed = e.key === 'Tab' || e.keyCode === keycodeTab;\n\n      if (!isTabPressed) {\n        return;\n      }\n\n      if (e.key === 'Tab' || e.keyCode === keycodeTab) {\n        if ( e.shiftKey ) { // Tab backwards (shift + tab)\n          if (document.activeElement === firstTabFocusEl) {\n            e.preventDefault();\n            lastTabFocusEl.focus();\n          }\n        } else { // Tab forwards\n          if (document.activeElement === lastTabFocusEl) {\n            e.preventDefault();\n            firstTabFocusEl.focus();\n          }\n        }\n      }\n    });\n\n    // Trigger open modal event for this modal to allow event listeners to handle\n    const eventName = 'ModalOpenEvent_' + modalId;\n    document.dispatchEvent(new CustomEvent(eventName));\n  }\n\n  // Close modal\n  closeModal(modalId) {\n\n    const body = document.querySelector('body');\n    const skipNav = document.getElementById('dcf-skip-nav');\n    const header = document.getElementById('dcf-header');\n    const main = document.getElementById('dcf-main');\n    const footer = document.getElementById('dcf-footer');\n    const navToggleGroup = document.getElementById('dcf-nav-toggle-group');\n    const navToggleGroupParent = navToggleGroup && navToggleGroup.parentElement ? navToggleGroup.parentElement: null;\n    const nonModals = [ skipNav, header, main, footer ];\n    const thisModal = document.getElementById(modalId);\n    let modalClosed = thisModal.getAttribute('aria-hidden') === 'true' ? true : false;\n    this.currentModal = null;\n\n    // Don't close modal if it's already closed\n    if (modalClosed) {\n      return;\n    }\n\n    // Remove `.dcf-modal-is-open` helper class from body\n    body.classList.remove('dcf-modal-is-open');\n\n    // Restore visibility and functionality to elements outside of modal\n    nonModals.forEach(function(el, array) {\n      if (navToggleGroup && el === navToggleGroupParent) {\n        // show all children of navToggleGroupParent\n        const children = navToggleGroupParent.childNodes;\n        children.forEach(function (child, array) {\n          if (child.nodeType === Node.ELEMENT_NODE) {\n            child.setAttribute('aria-hidden', 'false');\n          }\n        });\n      }\n\n      // show all nonModals\n      el.setAttribute('aria-hidden','false');\n    });\n\n    // Set attribute for this modal\n    thisModal.setAttribute('aria-hidden', 'true');\n\n    // Add/remove classes to this modal\n    thisModal.classList.remove('dcf-opacity-100', 'dcf-pointer-events-auto', 'z-modal-with-nav-toggle-group');\n    thisModal.classList.add('dcf-opacity-0', 'dcf-pointer-events-none');\n\n    // Modal transition\n    function modalTransition() {\n\n    \t// Remove event listener after the modal transition\n      thisModal.removeEventListener('transitionend', modalTransition);\n\n      // Add the `.dcf-invisible` class to this modal after the transition\n      if (!thisModal.classList.contains('dcf-invisible')) {\n        thisModal.classList.add('dcf-invisible');\n      }\n    }\n\n    // Add event listener for the end of the modal transition\n    thisModal.addEventListener('transitionend', modalTransition);\n\n    // Send focus back to button that opened modal\n    if (this.currentBtn) {\n      document.getElementById(this.currentBtn).focus();\n    }\n\n    // Allow body to scroll\n    if (this.enableBodyScroll) {\n      this.enableBodyScroll(thisModal);\n    }\n\n    // Trigger close modal event for this modal to allow event listeners to handle\n    const eventName = 'ModalCloseEvent_' + modalId;\n    document.dispatchEvent(new CustomEvent(eventName));\n  }\n\n  btnToggleListen(btnToggleModal, modalId, btnId) {\n    let modalInstance = this;\n\n    // Listen for when 'open modal' button is pressed\n    btnToggleModal.addEventListener('click', function () {\n      // Toggle modal when button is pressed\n      modalInstance.toggleModal(modalId, btnId);\n    }, false);\n  }\n\n  btnCloseListen(btnCloseModal, modal) {\n    let modalInstance = this;\n\n    // Listen for when 'close modal' button is pressed\n    btnCloseModal.addEventListener('click', function () {\n\n      // Open modal when button is pressed\n      modalInstance.closeModal(modal.getAttribute('id'));\n    }, false);\n  }\n\n  overlayListen(modal, modalWrapper) {\n    let modalInstance = this;\n\n    // Listen for clicks on the open modal\n    modal.addEventListener('click', function (event) {\n\n      // If the click is in modal wrapper, leave the modal open\n      if (modalWrapper.contains(event.target)) {\n        return;\n      }\n\n      // If the click is outside the modal wrapper (on the modal overlay), close the modal\n      modalInstance.closeModal(modal.getAttribute('id'));\n    });\n  }\n\n  escListen() {\n    let modalInstance = this;\n\n    // Listen for when 'esc' key is pressed\n    document.addEventListener('keydown', function (event) {\n\n      // Close the currently open modal when 'esc' key is pressed\n      if (event.which === 27 && modalInstance.currentModal) {\n        event.preventDefault();\n        modalInstance.closeModal(modalInstance.currentModal);\n      }\n    });\n\n  }\n\n  generateUUID() {\n    var d = new Date().getTime();\n    var d2 = (performance && performance.now && (performance.now()*1000)) || 0;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16;\n      if(d > 0){\n        r = (d + r)%16 | 0;\n        d = Math.floor(d/16);\n      } else {\n        r = (d2 + r)%16 | 0;\n        d2 = Math.floor(d2/16);\n      }\n      return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n  }\n\n  initialize() {\n    if(!this.modals) {\n      return;\n    }\n\n    // Define constants used in modal component\n    const body = document.querySelector('body');\n    const btnsToggleModal = document.querySelectorAll('.dcf-btn-toggle-modal');\n    const btnsCloseModal = document.querySelectorAll('.dcf-btn-close-modal');\n    const modalsWrapper = document.querySelectorAll('.dcf-modal-wrapper');\n    const modalsContent = document.querySelectorAll('.dcf-modal-content');\n    const modalsHeader = document.querySelectorAll('.dcf-modal-header');\n\n    let currentBtn = null;\n    let currentModal = null;\n\n    // Loop through all buttons that open modals\n    for (let i = 0; i < btnsToggleModal.length; i++) {\n      const btnToggleModal = btnsToggleModal[i];\n      const modalId = btnToggleModal.getAttribute('data-toggles-modal');\n\n      // Generate unique ID for each 'open modal' button\n      const btnId = this.generateUUID();\n      btnToggleModal.setAttribute('id', btnId);\n\n      // Buttons are disabled by default until JavaScript has loaded.\n      // Remove the 'disabled' attribute to make them functional.\n      btnToggleModal.removeAttribute('disabled');\n      this.btnToggleListen(btnToggleModal, modalId, btnId);\n    }\n\n    // Loop through all modals\n    for (let i = 0; i < this.modals.length; i++) {\n      const modal = this.modals[i];\n      const modalWrapper = modalsWrapper[i];\n      const modalContent = modalsContent[i];\n      const modalHeader = modalsHeader[i];\n      const btnCloseModal = btnsCloseModal[i];\n      const modalId = modal.id;\n      const modalHeadingId = modalId + '-heading';\n\n      // Get all headings in each modal header\n      const modalHeadings = modalHeader.querySelectorAll('h1, h2, h3, h4, h5, h6');\n\n      // Set ID on the first heading of each modal\n      modalHeadings[0].id = modalHeadingId;\n\n      // Append modals to body so that elements outside of modal can be hidden when modal is open\n      this.appendToBody(modal);\n\n      // Modals are hidden by default until JavaScript has loaded.\n      // Remove `hidden` attribute, then later replace with `.dcf-invisible` to allow for modal transitions.\n      modal.removeAttribute('hidden');\n\n      // Set attributes for each modal\n      modal.setAttribute('aria-labelledby', modalHeadingId);\n      modal.setAttribute('aria-hidden', 'true');\n      modal.setAttribute('role', 'dialog');\n      modal.setAttribute('tabindex', '-1');\n\n      // Check modal for any additional classes\n      if (modal.classList.length === 1 && modal.classList.contains('dcf-modal')) {\n        // If no custom classes are present, add default background utility class to modal\n        modal.classList.add('dcf-bg-overlay-dark');\n      }\n\n      // Add default utility classes to each modal\n      modal.classList.add('dcf-fixed', 'dcf-pin-top', 'dcf-pin-left', 'dcf-h-100%', 'dcf-w-100%', 'dcf-d-flex', 'dcf-ai-center', 'dcf-jc-center', 'dcf-opacity-0', 'dcf-pointer-events-none', 'dcf-invisible');\n\n      // Set attribute for modal wrapper\n      modalWrapper.setAttribute('role', 'document');\n\n      // Check modal wrapper for any additional classes\n      if (modalWrapper.classList.length === 1 && modalWrapper.classList.contains('dcf-modal-wrapper')) {\n        // If no custom classes are present, add default utility classes to modal wrapper\n        modalWrapper.classList.add('dcf-relative', 'dcf-h-auto', 'dcf-overflow-y-auto');\n      }\n\n      // Check modal header for any additional classes\n      if (modalHeader.classList.length === 1 && modalHeader.classList.contains('dcf-modal-header')) {\n        // If no custom classes are present, add default utility classes to modal header\n        modalHeader.classList.add('dcf-wrapper', 'dcf-pt-8', 'dcf-sticky', 'dcf-pin-top');\n      }\n\n      // Check each 'close' button for any additional classes\n      if (btnCloseModal.classList.length === 1 && btnCloseModal.classList.contains('dcf-btn-close-modal')) {\n        // If no custom classes are present, add default utility classes to 'close' button\n        btnCloseModal.classList.add('dcf-btn', 'dcf-btn-tertiary', 'dcf-absolute', 'dcf-pin-top', 'dcf-pin-right', 'dcf-z-1');\n      }\n\n      // Check modal content for any additional classes\n      if (modalContent.classList.length === 1 && modalContent.classList.contains('dcf-modal-content')) {\n        // If no custom classes are present, add default utility classes to modal content\n        modalContent.classList.add('dcf-wrapper', 'dcf-pb-8');\n      }\n\n      // Set attributes for each 'close' button\n      btnCloseModal.setAttribute('type', 'button');\n      btnCloseModal.setAttribute('aria-label', 'Close');\n\n      this.escListen();\n      this.overlayListen(modal, modalWrapper);\n      this.btnCloseListen(btnCloseModal, modal);\n\n    }\n  }\n}\n\nreturn Modal;\n}));\n",";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.dcfHelperUuidv4 = factory();\n  }\n}(this, function() {\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nreturn uuidv4;\n}));\n","// Lazy Load\nlet LazyLoad = require('dcf-lazyLoad');\nconst images = document.querySelectorAll('[loading=lazy], .dcf-lazy-load');\nconst observerConfig = {\n\t// extend intersection root margin by 50px to start intersection earlier by 50px\n\trootMargin: '0px 0px 50px 0px',\n\tthreshold: [0, 0.40]\n};\nconst enterClassNames = ['dcf-fade-in'];\nconst exampleLazyLoad = new LazyLoad(images, observerConfig, enterClassNames);\nexampleLazyLoad.initialize();\n\n\n// Modal\nlet Modal = require('dcf-modal');\nconst modals = document.querySelectorAll('.dcf-modal');\nconst bodyScrollLock = require('body-scroll-lock');\nconst exampleModal = new Modal(modals, bodyScrollLock);\nexampleModal.initialize();\n\n\n// Notice\n// let Notice = require('dcf-notice');\n// const noticeOptions = {\n// \twidget: 'notice',\n// \t'notice-type': 'alert',\n// \tanimation: 'true',\n// \tlocation: 'fixedBottom',\n// \tcollapsible: 'true',\n// \tid: 'dynamicNotice1'\n// };\n//\n// Notice.create('Spaghetti Monster Lives', 'You know no spaghetti', noticeOptions);\n\n\n// Date Picker\n// let flatpickr = require('flatpickr/flatpickr');\n// require(\"flatpickr/flatpickr.css\");\n// let datepicker = document.querySelector('[data-widget*=\"flatpickr\"]');\n// flatpickr(datepicker, {\n// \tenableTime: true,\n// \tdateFormat: \"Y-m-d h:iK\",\n// });\n","!function(e,t){if(\"function\"==typeof define&&define.amd)define([\"exports\"],t);else if(\"undefined\"!=typeof exports)t(exports);else{var o={};t(o),e.bodyScrollLock=o}}(this,function(exports){\"use strict\";function r(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}Object.defineProperty(exports,\"__esModule\",{value:!0});var l=!1;if(\"undefined\"!=typeof window){var e={get passive(){l=!0}};window.addEventListener(\"testPassive\",null,e),window.removeEventListener(\"testPassive\",null,e)}var d=\"undefined\"!=typeof window&&window.navigator&&window.navigator.platform&&/iP(ad|hone|od)/.test(window.navigator.platform),c=[],u=!1,a=-1,s=void 0,v=void 0,f=function(t){return c.some(function(e){return!(!e.options.allowTouchMove||!e.options.allowTouchMove(t))})},m=function(e){var t=e||window.event;return!!f(t.target)||(1<t.touches.length||(t.preventDefault&&t.preventDefault(),!1))},o=function(){setTimeout(function(){void 0!==v&&(document.body.style.paddingRight=v,v=void 0),void 0!==s&&(document.body.style.overflow=s,s=void 0)})};exports.disableBodyScroll=function(i,e){if(d){if(!i)return void console.error(\"disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.\");if(i&&!c.some(function(e){return e.targetElement===i})){var t={targetElement:i,options:e||{}};c=[].concat(r(c),[t]),i.ontouchstart=function(e){1===e.targetTouches.length&&(a=e.targetTouches[0].clientY)},i.ontouchmove=function(e){var t,o,n,r;1===e.targetTouches.length&&(o=i,r=(t=e).targetTouches[0].clientY-a,!f(t.target)&&(o&&0===o.scrollTop&&0<r?m(t):(n=o)&&n.scrollHeight-n.scrollTop<=n.clientHeight&&r<0?m(t):t.stopPropagation()))},u||(document.addEventListener(\"touchmove\",m,l?{passive:!1}:void 0),u=!0)}}else{n=e,setTimeout(function(){if(void 0===v){var e=!!n&&!0===n.reserveScrollBarGap,t=window.innerWidth-document.documentElement.clientWidth;e&&0<t&&(v=document.body.style.paddingRight,document.body.style.paddingRight=t+\"px\")}void 0===s&&(s=document.body.style.overflow,document.body.style.overflow=\"hidden\")});var o={targetElement:i,options:e||{}};c=[].concat(r(c),[o])}var n},exports.clearAllBodyScrollLocks=function(){d?(c.forEach(function(e){e.targetElement.ontouchstart=null,e.targetElement.ontouchmove=null}),u&&(document.removeEventListener(\"touchmove\",m,l?{passive:!1}:void 0),u=!1),c=[],a=-1):(o(),c=[])},exports.enableBodyScroll=function(t){if(d){if(!t)return void console.error(\"enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.\");t.ontouchstart=null,t.ontouchmove=null,c=c.filter(function(e){return e.targetElement!==t}),u&&0===c.length&&(document.removeEventListener(\"touchmove\",m,l?{passive:!1}:void 0),u=!1)}else(c=c.filter(function(e){return e.targetElement!==t})).length||o()}});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}