{"version":3,"sources":["common/dcf-modal.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_typeof","Symbol","iterator","obj","constructor","_classCallCheck","instance","TypeError","root","factory","define","amd","exports","module","dcfModal","undefined","Modal","modals","this","value","el","body","document","querySelector","firstChild","firstElementChild","insertBefore","modalId","openBtnId","modal","getAttribute","closeModal","thisModal","getElementById","modalOpen","currentBtn","currentModal","nonModals","forEach","array","setAttribute","classList","add","remove","focus","modalClosed","removeAttribute","btnOpenModal","btnId","addEventListener","openModal","btnCloseModal","modalContent","event","contains","btnsOpenModal","querySelectorAll","btnsCloseModal","modalsContent","btnOpenListen","_i","modalHeadingId","id","prependBody","overlayListen","btnCloseListen"],"mappings":"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","file":"dcf-modal.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n;(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else {\n    root.dcfModal = factory();\n  }\n})(undefined, function () {\n  var Modal = function () {\n\n    /**\n     * class constructor\n     * @param {modals} modals of selected modals\n     */\n    function Modal(modals) {\n      _classCallCheck(this, Modal);\n\n      //     this.thebody = body;\n      this.modals = modals;\n    }\n\n    /**\n     * Prepend modals to body so that elements outside of modal can be made inert\n     * @param {string} el: the element that we are targetting\n     */\n\n\n    _createClass(Modal, [{\n      key: 'prependBody',\n      value: function prependBody(el) {\n        var body = document.querySelector('body');\n        var firstChild = body.firstElementChild;\n        body.insertBefore(el, firstChild);\n      }\n\n      // Transition modal on close\n      //   modalTransition(event, modal) {\n      //     const thisModal = this;\n      //\n      //     // Remove the event listener after the modal transition has completed\n      //     thisModal.removeEventListener('transitionend', modalTransition);\n      //\n      //     // Add the `.dcf-invisible` class to this modal after the transition\n      //     if (!thisModal.classList.contains('dcf-invisible')) {\n      //       thisModal.classList.add('dcf-invisible');\n      //     }\n      //   }\n\n      // Open modal\n\n    }, {\n      key: 'openModal',\n      value: function openModal(modalId, openBtnId) {\n\n        var body = document.querySelector('body');\n\n        for (var i = 0; i < this.modals.length; i++) {\n          var modal = this.modals[i];\n\n          if (modal.getAttribute('id') !== modalId) {\n            this.closeModal(modal.getAttribute('id'));\n          }\n        }\n\n        var thisModal = document.getElementById(modalId);\n        var modalOpen = thisModal.getAttribute('aria-hidden') === 'false' ? true : false;\n\n        if (openBtnId) {\n          currentBtn = openBtnId;\n        }\n\n        currentModal = modalId;\n\n        // Don't open modal if it's already open\n        if (modalOpen) {\n          return;\n        }\n\n        // Set elements outside of modal to be inert and hidden from screen readers\n        nonModals.forEach(function (el, array) {\n          el.setAttribute('aria-hidden', 'true');\n          el.setAttribute('inert', '');\n          // TODO: Configure inert polyfill\n        });\n\n        //   \tPrevent body from scrolling\n        //   \tdisableBodyScroll(thisModal);\n\n        // Add `.dcf-modal-is-open` helper class to body\n        body.classList.add('dcf-modal-is-open');\n\n        // Set attribute for this modal\n        thisModal.setAttribute('aria-hidden', 'false');\n\n        // Add/remove classes to this modal\n        thisModal.classList.remove('dcf-opacity-0', 'dcf-pointer-events-none', 'dcf-invisible');\n        thisModal.classList.add('dcf-opacity-100', 'dcf-pointer-events-auto');\n\n        // Send focus to modal content\n        thisModal.focus();\n\n        // TODO: Trap focus inside the modal content\n      }\n\n      // Close modal\n\n    }, {\n      key: 'closeModal',\n      value: function closeModal(modalId) {\n\n        var body = document.querySelector('body');\n        var thisModal = document.getElementById(modalId);\n\n        var modalClosed = thisModal.getAttribute('aria-hidden') === 'true' ? true : false;\n\n        currentModal = null;\n\n        // Don't close modal if it's already closed\n        if (modalClosed) {\n          return;\n        }\n\n        // Remove `.dcf-modal-is-open` helper class from body\n        body.classList.remove('dcf-modal-is-open');\n\n        // Restore visibility andd functionality to elements outside of modal\n        nonModals.forEach(function (el, array) {\n          el.setAttribute('aria-hidden', 'false');\n          el.removeAttribute('inert');\n        });\n\n        // Set attribute for this modal\n        thisModal.setAttribute('aria-hidden', 'true');\n\n        // Add/remove classes to this modal\n        thisModal.classList.remove('dcf-opacity-100', 'dcf-pointer-events-auto');\n        thisModal.classList.add('dcf-opacity-0', 'dcf-pointer-events-none');\n\n        // Add event listener for the end of the modal transition\n        //     thisModal.addEventListener('transitionend', modalTransition);\n\n        // Send focus back to button that opened modal\n        if (currentBtn) {\n          document.getElementById(currentBtn).focus();\n        }\n\n        // TODO: Allow body to scroll\n      }\n    }, {\n      key: 'btnOpenListen',\n      value: function btnOpenListen(btnOpenModal, modalId, btnId) {\n\n        // TODO: account for multiple buttons able to open a single modal (e.g., search)\n        // Listen for when 'open modal' button is pressed\n        btnOpenModal.addEventListener('click', function () {\n          // Open modal when button is pressed\n          this.openModal(modalId, btnId);\n        }, false);\n      }\n    }, {\n      key: 'btnCloseListen',\n      value: function btnCloseListen(btnCloseModal, modal) {\n\n        // Listen for when 'close modal' button is pressed\n        btnCloseModal.addEventListener('click', function () {\n          // Open modal when button is pressed\n          this.closeModal(modal.getAttribute('id'));\n        }, false);\n      }\n    }, {\n      key: 'overlayListen',\n      value: function overlayListen(modal, modalContent) {\n\n        // Listen for clicks on the open modal\n        modal.addEventListener('click', function (event) {\n\n          // If the click is in modal content, leave the modal open\n          if (modalContent.contains(event.target)) {\n            return;\n          }\n\n          // If the click is outside the modal content (on the modal overlay), close the modal\n          this.closeModal(modal.getAttribute('id'));\n        });\n      }\n\n      // Listen for when 'esc' key is pressed\n      //   document.addEventListener('keydown', function (event) {\n      //\n      //     // Close the currently open modal when 'esc' key is pressed\n      //     if (event.which === 27 && currentModal) {\n      //       event.preventDefault();\n      //       closeModal(currentModal);\n      //     }\n      //   }, false);\n\n\n    }, {\n      key: 'initialize',\n      value: function initialize() {\n\n        if (!this.modals) {\n          return;\n        }\n\n        // Define constants used in modal component\n        var body = document.querySelector('body');\n        var btnsOpenModal = document.querySelectorAll('.dcf-btn-open-modal');\n        var btnsCloseModal = document.querySelectorAll('.dcf-btn-close-modal');\n        var modalsContent = document.querySelectorAll('.dcf-modal-content');\n        var skipNav = document.getElementById('dcf-skip-nav');\n        var header = document.getElementById('dcf-header');\n        var main = document.getElementById('dcf-main');\n        var footer = document.getElementById('dcf-footer');\n        var nonModals = [skipNav, header, main, footer];\n\n        var currentBtn = null;\n        var currentModal = null;\n\n        // Loop through all buttons that open modals\n        for (var i = 0; i < btnsOpenModal.length; i++) {\n          var btnOpenModal = btnsOpenModal[i];\n          var modalId = btnOpenModal.getAttribute('data-opens-modal');\n          var btnId = 'dcf-btn-opens-' + modalId;\n          btnOpenModal.setAttribute('id', btnId);\n\n          // Buttons are disabled by default until JavaScript has loaded.\n          // Remove the 'disabled' attribute to make them functional.\n          btnOpenModal.removeAttribute('disabled');\n\n          this.btnOpenListen(btnOpenModal, modalId, btnId);\n        }\n\n        // Loop through all modals\n        for (var _i = 0; _i < this.modals.length; _i++) {\n          var modal = this.modals[_i];\n          var modalContent = modalsContent[_i];\n          var btnCloseModal = btnsCloseModal[_i];\n          var _modalId = modal.id;\n          var modalHeadingId = _modalId + '-heading';\n\n          // Get all headings in each modal\n          var modalHeadings = modalContent.querySelectorAll('h1, h2, h3, h4, h5, h6');\n\n          // Set ID on the first heading of each modal\n          modalHeadings[0].id = modalHeadingId;\n\n          // Prepend modals to body so that elements outside of modal can be made inert when modal is open\n          this.prependBody(modal);\n\n          // Modals are hidden by default until JavaScript has loaded.\n          // Remove `hidden` attribute, then later replace with `.dcf-invisible` to allow for modal transitions.\n          modal.removeAttribute('hidden');\n\n          // Set attributes for each modal\n          modal.setAttribute('aria-labelledby', modalHeadingId);\n          modal.setAttribute('aria-hidden', 'true');\n          modal.setAttribute('role', 'dialog');\n          modal.setAttribute('tabindex', '-1');\n\n          // Add classes to each modal\n          modal.classList.add('dcf-fixed', 'dcf-pin-top', 'dcf-pin-left', 'dcf-h-100%', 'dcf-w-100%', 'dcf-d-flex', 'dcf-ai-center', 'dcf-jc-center', 'dcf-invisible');\n\n          // Set attribute for modal content\n          modalContent.setAttribute('role', 'document');\n\n          // Add classes to modal content\n          // TODO: add these classes only if no custom classes are present in the markup\n          modalContent.classList.add('dcf-relative', 'dcf-wrapper', 'dcf-pt-7', 'dcf-pb-7');\n\n          // Add classes and attributes to each 'close' button\n          // TODO: add these classes only if no custom classes are present in the markup\n          btnCloseModal.classList.add('dcf-absolute', 'dcf-pin-top', 'dcf-pin-right', 'dcf-z-1');\n\n          // Set attributes for each 'close' button\n          btnCloseModal.setAttribute('type', 'button');\n          btnCloseModal.setAttribute('aria-label', 'Close');\n\n          this.overlayListen(modal, modalContent);\n\n          this.btnCloseListen(btnCloseModal, modal);\n        }\n      }\n    }]);\n\n    return Modal;\n  }();\n\n  return Modal;\n});"]}