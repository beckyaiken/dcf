{"version":3,"sources":["common/dcf-modal.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_typeof","Symbol","iterator","obj","constructor","_classCallCheck","instance","TypeError","root","factory","define","amd","exports","module","require","dcfModal","dcfHelperUuidv4","undefined","uuidv4","Modal","modals","bodyScrollLock","this","disableBodyScroll","enableBodyScroll","value","el","document","querySelector","appendChild","modalId","btnId","getElementById","getAttribute","closeModal","openModal","btn","btnState","btnSVGs","getElementsByTagName","btnLabels","getElementsByClassName","gTags","classList","contains","toLowerCase","remove","add","textContent","openBtnId","body","skipNav","header","main","footer","navToggleGroup","navToggleGroupParent","parentElement","nonModals","_i","modal","thisModal","modalOpen","modalWithNavToggleGroup","currentBtn","openBtn","setNavToggleBtnState","currentModal","setAttribute","children","childNodes","j","nodeType","Node","ELEMENT_NODE","tabFocusEls","querySelectorAll","firstTabFocusEl","lastTabFocusEl","focus","addEventListener","e","keyCode","shiftKey","activeElement","preventDefault","eventName","dispatchEvent","CustomEvent","modalClosed","closeBtn","modalTransition","removeEventListener","btnToggleModal","modalInstance","toggleModal","btnCloseModal","modalWrapper","event","which","d","Date","getTime","d2","performance","now","replace","c","r","Math","random","floor","toString","btnsToggleModal","btnsCloseModal","modalsWrapper","modalsContent","modalsHeader","generateUUID","removeAttribute","btnToggleListen","_i2","modalContent","modalHeader","modalHeadingId","id","appendToBody","escListen","overlayListen","btnCloseListen"],"mappings":"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","file":"dcf-modal.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n;(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['./dcf-uuidGen'], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory(require('./dcf-uuidGen'));\n  } else {\n    root.dcfModal = factory(root.dcfHelperUuidv4);\n  }\n})(undefined, function (uuidv4) {\n  var Modal = function () {\n    /**\n     * class constructor\n     * @param {modals} modals of selected modals\n     */\n    function Modal(modals, bodyScrollLock) {\n      _classCallCheck(this, Modal);\n\n      this.modals = modals;\n      this.disableBodyScroll = null;\n      this.enableBodyScroll = null;\n      if (bodyScrollLock && bodyScrollLock.disableBodyScroll && bodyScrollLock.enableBodyScroll) {\n        this.disableBodyScroll = bodyScrollLock.disableBodyScroll;\n        this.enableBodyScroll = bodyScrollLock.enableBodyScroll;\n      }\n    }\n\n    /**\n     * Prepend modals to body so that elements outside of modal can be made inert\n     * @param {string} el: the element that we are targetting\n     */\n\n\n    _createClass(Modal, [{\n      key: 'appendToBody',\n      value: function appendToBody(el) {\n        var body = document.querySelector('body');\n        body.appendChild(el);\n      }\n\n      // Toggle modal\n\n    }, {\n      key: 'toggleModal',\n      value: function toggleModal(modalId, btnId) {\n        var thisModal = document.getElementById(modalId);\n        var modalOpen = thisModal.getAttribute('aria-hidden') === 'false' ? true : false;\n\n        if (modalOpen) {\n          // modal open so close it\n          this.closeModal(modalId);\n        } else {\n          // modal closed so open it\n          this.openModal(modalId, btnId);\n        }\n      }\n\n      // Set nav toggle button state as open or closed\n      // Note: Assumes nav toggle buttons are svgs with expected markup\n\n    }, {\n      key: 'setNavToggleBtnState',\n      value: function setNavToggleBtnState(btn, btnState) {\n        btnState = typeof btnState !== 'undefined' ? btnState : 'open';\n        var btnSVGs = btn.getElementsByTagName('svg');\n        var btnLabels = btn.getElementsByClassName('dcf-nav-toggle-label');\n\n        // Set SVG state\n        if (btnSVGs.length) {\n          var gTags = btnSVGs[0].getElementsByTagName('g');\n          for (var i = 0; i < gTags.length; i++) {\n            if (gTags[i].classList.contains('dcf-nav-toggle-icon-open')) {\n              if (btnState.toLowerCase() == 'open') {\n                gTags[i].classList.remove('dcf-d-none');\n              } else {\n                gTags[i].classList.add('dcf-d-none');\n              }\n            } else if (gTags[i].classList.contains('dcf-nav-toggle-icon-close')) {\n              if (btnState.toLowerCase() == 'open') {\n                gTags[i].classList.add('dcf-d-none');\n              } else {\n                gTags[i].classList.remove('dcf-d-none');\n              }\n            }\n          }\n        }\n\n        // Set Button Label\n        if (btnLabels.length) {\n          if (btnState.toLowerCase() == 'open') {\n            btnLabels[0].textContent = btn.getAttribute('data-nav-toggle-label-open') ? btn.getAttribute('data-nav-toggle-label-open') : 'Open';\n          } else {\n            btnLabels[0].textContent = btn.getAttribute('data-nav-toggle-label-closed') ? btn.getAttribute('data-nav-toggle-label-closed') : 'Close';\n          }\n        }\n      }\n\n      // Open modal\n\n    }, {\n      key: 'openModal',\n      value: function openModal(modalId, openBtnId) {\n        var body = document.querySelector('body');\n        var skipNav = document.getElementById('dcf-skip-nav');\n        var header = document.getElementById('dcf-header');\n        var main = document.getElementById('dcf-main');\n        var footer = document.getElementById('dcf-footer');\n        var navToggleGroup = document.getElementById('dcf-nav-toggle-group');\n        var navToggleGroupParent = navToggleGroup && navToggleGroup.parentElement ? navToggleGroup.parentElement : null;\n        var nonModals = [skipNav, header, main, footer];\n\n        for (var _i = 0; _i < this.modals.length; _i++) {\n          var modal = this.modals[_i];\n          if (modal.getAttribute('id') !== modalId) {\n            this.closeModal(modal.getAttribute('id'));\n          }\n        }\n\n        var thisModal = document.getElementById(modalId);\n        var modalOpen = thisModal.getAttribute('aria-hidden') === 'false' ? true : false;\n\n        var modalWithNavToggleGroup = false;\n        if (openBtnId) {\n          this.currentBtn = openBtnId;\n          var openBtn = document.getElementById(openBtnId);\n          modalWithNavToggleGroup = openBtn && openBtn.getAttribute('data-with-nav-toggle-group') === 'true';\n          if (modalWithNavToggleGroup) {\n            this.setNavToggleBtnState(openBtn, 'closed');\n          }\n        }\n\n        this.currentModal = modalId;\n\n        // Don't open modal if it's already open\n        if (modalOpen) {\n          return;\n        }\n\n        // Set elements outside of modal to be inert and hidden from screen readers\n        for (var i = 0; i < nonModals.length; i++) {\n          if (modalWithNavToggleGroup && navToggleGroup && nonModals[i] === navToggleGroupParent) {\n            nonModals[i].setAttribute('aria-hidden', 'false');\n\n            // hide all children of navToggleGroupParent except navToggleGroup\n            var children = navToggleGroupParent.childNodes;\n            for (var j = 0; j < children.length; j++) {\n              if (children[j].nodeType === Node.ELEMENT_NODE) {\n                if (children[j] === navToggleGroup) {\n                  children[j].setAttribute('aria-hidden', 'false');\n                } else {\n                  children[j].setAttribute('aria-hidden', 'true');\n                }\n              }\n            }\n          } else {\n            nonModals[i].setAttribute('aria-hidden', 'true');\n          }\n        }\n\n        // Prevent body from scrolling\n        if (this.disableBodyScroll) {\n          this.disableBodyScroll(thisModal);\n        }\n\n        // Add `.dcf-modal-is-open` helper class to body\n        body.classList.add('dcf-modal-is-open');\n\n        // Set attribute for this modal\n        thisModal.setAttribute('aria-hidden', 'false');\n\n        // Add/remove classes to this modal\n        thisModal.classList.remove('dcf-opacity-0', 'dcf-pointer-events-none', 'dcf-invisible');\n        thisModal.classList.add('dcf-opacity-100', 'dcf-pointer-events-auto');\n\n        // Apply modal with toggle group class if requested\n        if (modalWithNavToggleGroup) {\n          thisModal.classList.add('dcf-z-modal-with-nav-toggle-group');\n        }\n        var keycodeTab = 9;\n        var tabFocusEls = thisModal.querySelectorAll('button:not([hidden]):not([disabled]), ' + '[href]:not([hidden]), input:not([hidden]):not([type=\"hidden\"]):not([disabled]), ' + 'select:not([hidden]):not([disabled]), textarea:not([hidden]):not([disabled]), ' + '[tabindex=\"0\"]:not([hidden]):not([disabled]), summary:not([hidden]), ' + '[contenteditable]:not([hidden]), audio[controls]:not([hidden]), ' + 'video[controls]:not([hidden])');\n        var firstTabFocusEl = tabFocusEls[0];\n        var lastTabFocusEl = tabFocusEls[tabFocusEls.length - 1];\n\n        // Send focus to the modal\n        thisModal.focus();\n\n        // Trap focus inside the modal content\n        thisModal.addEventListener('keydown', function (e) {\n\n          var isTabPressed = e.key === 'Tab' || e.keyCode === keycodeTab;\n\n          if (!isTabPressed) {\n            return;\n          }\n\n          if (e.key === 'Tab' || e.keyCode === keycodeTab) {\n            if (e.shiftKey) {\n              // Tab backwards (shift + tab)\n              if (document.activeElement === firstTabFocusEl) {\n                e.preventDefault();\n                lastTabFocusEl.focus();\n              }\n            } else {\n              // Tab forwards\n              if (document.activeElement === lastTabFocusEl) {\n                e.preventDefault();\n                firstTabFocusEl.focus();\n              }\n            }\n          }\n        });\n\n        // Trigger open modal event for this modal to allow event listeners to handle\n        var eventName = 'ModalOpenEvent_' + modalId;\n        document.dispatchEvent(new CustomEvent(eventName));\n      }\n\n      // Close modal\n\n    }, {\n      key: 'closeModal',\n      value: function closeModal(modalId) {\n\n        var body = document.querySelector('body');\n        var skipNav = document.getElementById('dcf-skip-nav');\n        var header = document.getElementById('dcf-header');\n        var main = document.getElementById('dcf-main');\n        var footer = document.getElementById('dcf-footer');\n        var navToggleGroup = document.getElementById('dcf-nav-toggle-group');\n        var navToggleGroupParent = navToggleGroup && navToggleGroup.parentElement ? navToggleGroup.parentElement : null;\n        var nonModals = [skipNav, header, main, footer];\n        var thisModal = document.getElementById(modalId);\n        var modalClosed = thisModal.getAttribute('aria-hidden') === 'true' ? true : false;\n        this.currentModal = null;\n\n        // Don't close modal if it's already closed\n        if (modalClosed) {\n          return;\n        }\n\n        // Remove `.dcf-modal-is-open` helper class from body\n        body.classList.remove('dcf-modal-is-open');\n\n        if (this.currentBtn) {\n          var closeBtn = document.getElementById(this.currentBtn);\n          if (closeBtn && closeBtn.getAttribute('data-with-nav-toggle-group') === 'true') {\n            this.setNavToggleBtnState(closeBtn, 'open');\n          }\n        }\n\n        // Restore visibility and functionality to elements outside of modal\n        for (var i = 0; i < nonModals.length; i++) {\n          if (navToggleGroup && nonModals[i] === navToggleGroupParent) {\n            // show all children of navToggleGroupParent\n            var children = navToggleGroupParent.childNodes;\n            for (var j = 0; j < children.length; j++) {\n              if (children[j].nodeType === Node.ELEMENT_NODE) {\n                children[j].setAttribute('aria-hidden', 'false');\n              }\n            }\n          }\n\n          // show all nonModals\n          nonModals[i].setAttribute('aria-hidden', 'false');\n        }\n\n        // Set attribute for this modal\n        thisModal.setAttribute('aria-hidden', 'true');\n\n        // Add/remove classes to this modal\n        thisModal.classList.remove('dcf-opacity-100', 'dcf-pointer-events-auto', 'z-modal-with-nav-toggle-group');\n        thisModal.classList.add('dcf-opacity-0', 'dcf-pointer-events-none');\n\n        // Modal transition\n        function modalTransition() {\n\n          // Remove event listener after the modal transition\n          thisModal.removeEventListener('transitionend', modalTransition);\n\n          // Add the `.dcf-invisible` class to this modal after the transition\n          if (!thisModal.classList.contains('dcf-invisible')) {\n            thisModal.classList.add('dcf-invisible');\n          }\n        }\n\n        // Add event listener for the end of the modal transition\n        thisModal.addEventListener('transitionend', modalTransition);\n\n        // Send focus back to button that opened modal\n        if (this.currentBtn) {\n          document.getElementById(this.currentBtn).focus();\n        }\n\n        // Allow body to scroll\n        if (this.enableBodyScroll) {\n          this.enableBodyScroll(thisModal);\n        }\n\n        // Trigger close modal event for this modal to allow event listeners to handle\n        var eventName = 'ModalCloseEvent_' + modalId;\n        document.dispatchEvent(new CustomEvent(eventName));\n      }\n    }, {\n      key: 'btnToggleListen',\n      value: function btnToggleListen(btnToggleModal, modalId, btnId) {\n        var modalInstance = this;\n\n        // Listen for when 'open modal' button is pressed\n        btnToggleModal.addEventListener('click', function () {\n          // Toggle modal when button is pressed\n          modalInstance.toggleModal(modalId, btnId);\n        }, false);\n      }\n    }, {\n      key: 'btnCloseListen',\n      value: function btnCloseListen(btnCloseModal, modal) {\n        var modalInstance = this;\n\n        // Listen for when 'close modal' button is pressed\n        btnCloseModal.addEventListener('click', function () {\n\n          // Open modal when button is pressed\n          modalInstance.closeModal(modal.getAttribute('id'));\n        }, false);\n      }\n    }, {\n      key: 'overlayListen',\n      value: function overlayListen(modal, modalWrapper) {\n        var modalInstance = this;\n\n        // Listen for clicks on the open modal\n        modal.addEventListener('click', function (event) {\n\n          // If the click is in modal wrapper, leave the modal open\n          if (modalWrapper.contains(event.target)) {\n            return;\n          }\n\n          // If the click is outside the modal wrapper (on the modal overlay), close the modal\n          modalInstance.closeModal(modal.getAttribute('id'));\n        });\n      }\n    }, {\n      key: 'escListen',\n      value: function escListen() {\n        var modalInstance = this;\n\n        // Listen for when 'esc' key is pressed\n        document.addEventListener('keydown', function (event) {\n\n          // Close the currently open modal when 'esc' key is pressed\n          if (event.which === 27 && modalInstance.currentModal) {\n            event.preventDefault();\n            modalInstance.closeModal(modalInstance.currentModal);\n          }\n        });\n      }\n    }, {\n      key: 'generateUUID',\n      value: function generateUUID() {\n        var d = new Date().getTime();\n        var d2 = performance && performance.now && performance.now() * 1000 || 0;\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n          var r = Math.random() * 16;\n          if (d > 0) {\n            r = (d + r) % 16 | 0;\n            d = Math.floor(d / 16);\n          } else {\n            r = (d2 + r) % 16 | 0;\n            d2 = Math.floor(d2 / 16);\n          }\n          return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n        });\n      }\n    }, {\n      key: 'initialize',\n      value: function initialize() {\n        if (!this.modals) {\n          return;\n        }\n\n        // Define constants used in modal component\n        var body = document.querySelector('body');\n        var btnsToggleModal = document.querySelectorAll('.dcf-btn-toggle-modal');\n        var btnsCloseModal = document.querySelectorAll('.dcf-btn-close-modal');\n        var modalsWrapper = document.querySelectorAll('.dcf-modal-wrapper');\n        var modalsContent = document.querySelectorAll('.dcf-modal-content');\n        var modalsHeader = document.querySelectorAll('.dcf-modal-header');\n\n        var currentBtn = null;\n        var currentModal = null;\n\n        // Loop through all buttons that open modals\n        for (var i = 0; i < btnsToggleModal.length; i++) {\n          var btnToggleModal = btnsToggleModal[i];\n          var modalId = btnToggleModal.getAttribute('data-toggles-modal');\n\n          // Generate unique ID for each 'open modal' button\n          var btnId = this.generateUUID();\n          btnToggleModal.setAttribute('id', btnId);\n\n          // Buttons are disabled by default until JavaScript has loaded.\n          // Remove the 'disabled' attribute to make them functional.\n          btnToggleModal.removeAttribute('disabled');\n          this.btnToggleListen(btnToggleModal, modalId, btnId);\n        }\n\n        // Loop through all modals\n        for (var _i2 = 0; _i2 < this.modals.length; _i2++) {\n          var modal = this.modals[_i2];\n          var modalWrapper = modalsWrapper[_i2];\n          var modalContent = modalsContent[_i2];\n          var modalHeader = modalsHeader[_i2];\n          var btnCloseModal = btnsCloseModal[_i2];\n          var _modalId = modal.id;\n          var modalHeadingId = _modalId + '-heading';\n\n          // Get all headings in each modal header\n          var modalHeadings = modalHeader.querySelectorAll('h1, h2, h3, h4, h5, h6');\n\n          // Set ID on the first heading of each modal\n          modalHeadings[0].id = modalHeadingId;\n\n          // Append modals to body so that elements outside of modal can be hidden when modal is open\n          this.appendToBody(modal);\n\n          // Modals are hidden by default until JavaScript has loaded.\n          // Remove `hidden` attribute, then later replace with `.dcf-invisible` to allow for modal transitions.\n          modal.removeAttribute('hidden');\n\n          // Set attributes for each modal\n          modal.setAttribute('aria-labelledby', modalHeadingId);\n          modal.setAttribute('aria-hidden', 'true');\n          modal.setAttribute('role', 'dialog');\n          modal.setAttribute('tabindex', '-1');\n\n          // Check modal for any additional classes\n          if (modal.classList.length === 1 && modal.classList.contains('dcf-modal')) {\n            // If no custom classes are present, add default background utility class to modal\n            modal.classList.add('dcf-bg-overlay-dark');\n          }\n\n          // Add default utility classes to each modal\n          modal.classList.add('dcf-fixed', 'dcf-pin-top', 'dcf-pin-left', 'dcf-h-100%', 'dcf-w-100%', 'dcf-d-flex', 'dcf-ai-center', 'dcf-jc-center', 'dcf-opacity-0', 'dcf-pointer-events-none', 'dcf-invisible');\n\n          // Set attribute for modal wrapper\n          modalWrapper.setAttribute('role', 'document');\n\n          // Check modal wrapper for any additional classes\n          if (modalWrapper.classList.length === 1 && modalWrapper.classList.contains('dcf-modal-wrapper')) {\n            // If no custom classes are present, add default utility classes to modal wrapper\n            modalWrapper.classList.add('dcf-relative', 'dcf-h-auto', 'dcf-overflow-y-auto');\n          }\n\n          // Check modal header for any additional classes\n          if (modalHeader.classList.length === 1 && modalHeader.classList.contains('dcf-modal-header')) {\n            // If no custom classes are present, add default utility classes to modal header\n            modalHeader.classList.add('dcf-wrapper', 'dcf-pt-8', 'dcf-sticky', 'dcf-pin-top');\n          }\n\n          // Check each 'close' button for any additional classes\n          if (btnCloseModal.classList.length === 1 && btnCloseModal.classList.contains('dcf-btn-close-modal')) {\n            // If no custom classes are present, add default utility classes to 'close' button\n            btnCloseModal.classList.add('dcf-btn', 'dcf-btn-tertiary', 'dcf-absolute', 'dcf-pin-top', 'dcf-pin-right', 'dcf-z-1');\n          }\n\n          // Check modal content for any additional classes\n          if (modalContent.classList.length === 1 && modalContent.classList.contains('dcf-modal-content')) {\n            // If no custom classes are present, add default utility classes to modal content\n            modalContent.classList.add('dcf-wrapper', 'dcf-pb-8');\n          }\n\n          // Set attributes for each 'close' button\n          btnCloseModal.setAttribute('type', 'button');\n          btnCloseModal.setAttribute('aria-label', 'Close');\n\n          this.escListen();\n          this.overlayListen(modal, modalWrapper);\n          this.btnCloseListen(btnCloseModal, modal);\n        }\n      }\n    }]);\n\n    return Modal;\n  }();\n\n  return Modal;\n});"]}